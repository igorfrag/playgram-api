generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  passwordHash   String
  fullName       String
  bio            String?
  profilePicture String?
  followerCount  Int      @default(0)
  followingCount Int      @default(0)
  postsCount     Int      @default(0)
  isPrivate      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  likes        Like[]
  commentLikes CommentLike[]
  followers    Follow[]      @relation("FollowingRelation")
  following    Follow[]      @relation("FollowerRelation")
}

model Post {
  id         Int      @id @default(autoincrement())
  userId     Int
  caption    String
  imageUrl   String
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  comments Comment[]
  likes    Like[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt(sort: Desc)])
}

model Comment {
  id         Int      @id @default(autoincrement())
  postId     Int
  userId     Int
  content    String
  likesCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  commentLike CommentLike[]

  @@index([postId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  followers User @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
