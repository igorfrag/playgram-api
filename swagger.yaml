openapi: 3.0.0
info:
    title: Playgram API
    version: 1.0.0
    description: API documentation for a social media application.

servers:
    - url: http://localhost:3000/
      description: Local Development Server

components:
    securitySchemes:
        cookieAuth:
            type: apiKey
            in: cookie
            name: token
    schemas:
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the user.
                username:
                    type: string
                    description: Unique username of the user.
                email:
                    type: string
                    format: email
                    description: Unique email address of the user.
                passwordHash:
                    type: string
                    description: Hashed password of the user.
                fullName:
                    type: string
                    description: Full name of the user.
                bio:
                    type: string
                    nullable: true
                    description: Biography of the user.
                profilePicture:
                    type: string
                    nullable: true
                    description: URL to the user's profile picture.
                followerCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of followers the user has.
                followingCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of users the user is following.
                postsCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of posts the user has created.
                isPrivate:
                    type: boolean
                    default: false
                    description: Indicates if the user's profile is private.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the user account was created.
                updatedAt:
                    type: string
                    format: date-time
                    description: Date and time when the user account was last updated.
        Post:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the post.
                userId:
                    type: integer
                    format: int32
                    description: ID of the user who created the post.
                caption:
                    type: string
                    description: Caption of the post.
                imageUrl:
                    type: string
                    description: URL to the image of the post.
                likesCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of likes the post has.
                commentsCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of comments the post has.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the post was created.
                updatedAt:
                    type: string
                    format: date-time
                    description: Date and time when the post was last updated.
        Comment:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the comment.
                postId:
                    type: integer
                    format: int32
                    description: ID of the post the comment belongs to.
                userId:
                    type: integer
                    format: int32
                    description: ID of the user who created the comment.
                content:
                    type: string
                    description: Content of the comment.
                likesCount:
                    type: integer
                    format: int32
                    default: 0
                    description: Number of likes the comment has.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the comment was created.
                updatedAt:
                    type: string
                    format: date-time
                    description: Date and time when the comment was last updated.
        Like:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the like.
                userId:
                    type: integer
                    format: int32
                    description: ID of the user who liked the post.
                postId:
                    type: integer
                    format: int32
                    description: ID of the post that was liked.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the like was created.
        CommentLike:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the comment like.
                userId:
                    type: integer
                    format: int32
                    description: ID of the user who liked the comment.
                commentId:
                    type: integer
                    format: int32
                    description: ID of the comment that was liked.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the comment like was created.
        Follow:
            type: object
            properties:
                id:
                    type: integer
                    format: int32
                    description: Unique identifier for the follow relationship.
                followerId:
                    type: integer
                    format: int32
                    description: ID of the user who is following.
                followingId:
                    type: integer
                    format: int32
                    description: ID of the user being followed.
                createdAt:
                    type: string
                    format: date-time
                    description: Date and time when the follow relationship was created.

paths:
    /users:
        get:
            summary: Get all users
            tags:
                - Users
            responses:
                200:
                    description: A list of users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                500:
                    description: Failed to fetch users.
    /users/register:
        post:
            summary: Register a new user
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - username
                                - email
                                - password
                                - fullName
                            properties:
                                username:
                                    type: string
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                fullName:
                                    type: string
                                bio:
                                    type: string
                                profilePicture:
                                    type: string
            responses:
                201:
                    description: User created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                400:
                    description: Failed to create user.
    /users/login:
        post:
            summary: Login a user
            tags:
                - Users
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
            responses:
                200:
                    description: User logged in successfully.
                    headers:
                        Set-Cookie:
                            schema:
                                type: string
                                example: token=your_jwt_token; Path=/; HttpOnly; SameSite=Lax; Max-Age=604800; Secure
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    user:
                                        $ref: '#/components/schemas/User'
                401:
                    description: Failed to login (Unauthorized).
    /users/me:
        get:
            summary: Get the logged-in user's profile
            tags:
                - Users
            security:
                - cookieAuth: []
            responses:
                200:
                    description: Successfully retrieved logged-in user's data.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        $ref: '#/components/schemas/User'
    /users/id/{id}:
        get:
            summary: Get user by ID
            tags:
                - Users
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user to retrieve.
            responses:
                200:
                    description: User data.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                404:
                    description: User not found.
                500:
                    description: Failed to fetch user.
    /users/{username}:
        get:
            summary: Get user by username
            tags:
                - Users
            parameters:
                - in: path
                  name: username
                  schema:
                      type: string
                  required: true
                  description: Username of the user to retrieve.
            responses:
                200:
                    description: User data.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                404:
                    description: User not found.
                500:
                    description: Failed to fetch user.
    /users/{id}:
        put:
            summary: Update user profile
            tags:
                - Users
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user to update.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                username:
                                    type: string
                                email:
                                    type: string
                                    format: email
                                fullName:
                                    type: string
                                bio:
                                    type: string
                                profilePicture:
                                    type: string
                                isPrivate:
                                    type: boolean
            responses:
                200:
                    description: Profile updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                    user:
                                        $ref: '#/components/schemas/User'
                403:
                    description: You are not allowed to edit this profile.
                400:
                    description: Failed to update profile.
        delete:
            summary: Delete a user
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user to delete.
            responses:
                204:
                    description: User deleted successfully.
                400:
                    description: Failed to delete user.
    /users/{id}/follow:
        post:
            summary: Toggle follow/unfollow a user
            tags:
                - Users
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user to follow/unfollow.
            responses:
                200:
                    description: User followed/unfollowed successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    data:
                                        type: object
                                        properties:
                                            is_following:
                                                type: boolean
                                            followers_count:
                                                type: integer
                400:
                    description: Error following user.
    /users/{id}/follows:
        get:
            summary: Get user follow count
            tags:
                - Users
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user to get follow counts for.
            responses:
                200:
                    description: Successfully retrieved follow count.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        type: object
                                        properties:
                                            followersCount:
                                                type: integer
                                            followingCount:
                                                type: integer
                404:
                    description: User not found.
                500:
                    description: Failed to fetch follow count.
    /users/{id}/posts:
        get:
            summary: Get posts by a specific user
            tags:
                - Users
                - Posts
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the user whose posts to retrieve.
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                  description: Page number for pagination.
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 20
                  description: Number of items per page.
            responses:
                200:
                    description: Successfully retrieved user's posts.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        type: object
                                        properties:
                                            posts:
                                                type: array
                                                items:
                                                    $ref: '#/components/schemas/Post'
                                            totalPosts:
                                                type: integer
                                            totalPages:
                                                type: integer
                                            currentPage:
                                                type: integer
                404:
                    description: User not found.
                403:
                    description: This profile is private.
                500:
                    description: Error fetching user posts.

    /posts/new:
        post:
            summary: Create a new post
            tags:
                - Posts
            security:
                - cookieAuth: []
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            required:
                                - image
                                - caption
                            properties:
                                image:
                                    type: string
                                    format: binary
                                    description: The image file for the post.
                                caption:
                                    type: string
                                    description: The caption for the post.
            responses:
                201:
                    description: Post created successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    data:
                                        type: object
                                        properties:
                                            post:
                                                $ref: '#/components/schemas/Post'
                400:
                    description: Image is required.
                500:
                    description: Error creating post.
    /posts:
        get:
            summary: Get paginated feed for the logged-in user
            tags:
                - Posts
            security:
                - cookieAuth: []
            parameters:
                - in: query
                  name: page
                  schema:
                      type: integer
                      default: 1
                  description: Page number for pagination.
                - in: query
                  name: limit
                  schema:
                      type: integer
                      default: 20
                  description: Number of items per page.
            responses:
                200:
                    description: Successfully retrieved user feed.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        type: object
                                        properties:
                                            posts:
                                                type: array
                                                items:
                                                    $ref: '#/components/schemas/Post'
                                            totalPosts:
                                                type: integer
                                            totalPages:
                                                type: integer
                                            currentPage:
                                                type: integer
                500:
                    description: Error fetching posts.
    /posts/{id}:
        get:
            summary: Get post by ID
            tags:
                - Posts
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the post to retrieve.
            responses:
                200:
                    description: Post data.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        type: object
                                        properties:
                                            post:
                                                $ref: '#/components/schemas/Post'
                500:
                    description: Error fetching post.
        delete:
            summary: Delete post by ID
            tags:
                - Posts
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the post to delete.
            responses:
                200:
                    description: Postagem deletada com sucesso.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                404:
                    description: Post not found.
                403:
                    description: You have no permission to delete this post.
                500:
                    description: Error deleting post.
    /posts/{id}/like:
        post:
            summary: Toggle like/unlike on a post
            tags:
                - Posts
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the post to like/unlike.
            responses:
                200:
                    description: Post liked/unliked successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                500:
                    description: Error toggling like.

    /comments/{id}:
        get:
            summary: Get all comments on a post by Post ID
            tags:
                - Comments
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the post to retrieve comments for.
                - in: query
                  name: skip
                  schema:
                      type: integer
                      default: 0
                  description: Number of comments to skip.
                - in: query
                  name: take
                  schema:
                      type: integer
                      default: 10
                  description: Number of comments to take.
            responses:
                200:
                    description: Successfully retrieved comments.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        type: array
                                        items:
                                            $ref: '#/components/schemas/Comment'
                500:
                    description: Failed to fetch comments.
        post:
            summary: Comment on a post by Post ID
            tags:
                - Comments
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the post to comment on.
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - content
                            properties:
                                content:
                                    type: string
                                    description: The content of the comment.
            responses:
                201:
                    description: Comment created successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    data:
                                        $ref: '#/components/schemas/Comment'
                400:
                    description: Comment cannot be empty.
                404:
                    description: Post not found.
                403:
                    description: You must follow the user to comment.
                500:
                    description: Error creating comment.
        delete:
            summary: Delete a comment by Comment ID
            tags:
                - Comments
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the comment to delete.
            responses:
                200:
                    description: Comment deleted successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    data:
                                        type: object # You might want to define a more specific schema here for the result of deletion
                404:
                    description: Comment not found.
                403:
                    description: Unauthorized.
                500:
                    description: Failed to delete comment.
    /comments/{id}/like:
        post:
            summary: Toggle like/unlike on a comment by Comment ID
            tags:
                - Comments
            security:
                - cookieAuth: []
            parameters:
                - in: path
                  name: id
                  schema:
                      type: integer
                  required: true
                  description: Numeric ID of the comment to like/unlike.
            responses:
                200:
                    description: Comment liked/unliked successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                500:
                    description: Failed to toggle like on comment.
